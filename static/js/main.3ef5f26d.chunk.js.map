{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","App_GeneralInfomation","Component","GeneralInfomation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fullname","birthday","address","email","yourphone","event","setState","target","value","id","type","placeholder","onChange","onChangeFullName","bind","ref","onChangeBirthday","onChangeAddress","onChangeEmail","onChangePhone","App_ShowGeneralInformation","ShowGeneralInformation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ef5f26d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  // render() {\n  //   return (\n  //     <div className=\"App\">\n  //       <header className=\"App-header\">\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //         <p>\n  //           Edit <code>src/App.js</code> and save to reload.\n  //         </p>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://reactjs.org\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Learn React\n  //         </a>\n  //       </header>\n  //     </div>\n  //   );\n  // }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <GeneralInfomation />\n      </div>\n      \n    );\n  }\n}\n\nclass GeneralInfomation extends Component\n{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      fullname: '',\n      birthday: '',\n      address: '',\n      email: '',\n      yourphone: ''\n    };\n  }\n\n  onChangeFullName(event){\n    this.setState({\n      fullname: event.target.value,\n    });\n  }\n\n  onChangeBirthday(event){\n    this.setState({\n      birthday: event.target.value,\n    });\n  }\n\n  onChangeAddress(event){\n    this.setState({\n      address: event.target.value,\n    });\n  }\n\n  onChangeEmail(event){\n    this.setState({\n      email: event.target.value,\n    });\n  }\n\n  onChangePhone(event){\n    this.setState({\n      yourphone: event.target.value,\n    });\n  }\n\n  componentDidUpdate() {\n    // something here ... \n  }\n\n  render(){\n    return(\n      <div id=\"general-infomation\">\n        <h3>Please Enter General Information</h3>\n        <span>Your Full Name: </span>\n        <input type=\"text\" placeholder={this.state.fullname} onChange={this.onChangeFullName.bind(this)} ref=\"full-name\"/>\n        <br/><br/>\n        <span>Your BirthDay: </span>\n        <input type=\"text\" placeholder={this.state.birthday} onChange={this.onChangeBirthday.bind(this)} ref=\"birth-of-date\"/>\n        <br/><br/>\n        <span>Your Address: </span>\n        <input type=\"text\" placeholder={this.state.address} onChange={this.onChangeAddress.bind(this)} ref=\"address\"/>\n        <br/><br/>\n        <span>Your Email: </span>\n        <input type=\"text\" placeholder={this.state.email} onChange={this.onChangeEmail.bind(this)} ref=\"email\"/>\n        <br/><br/>\n        <span>Your Phone Number: </span>\n        <input type=\"text\" placeholder={this.state.yourphone} onChange={this.onChangePhone.bind(this)} ref=\"phone-number\"/>\n        <p>-------------------------------------------------------------</p>\n        <ShowGeneralInformation \n          fullname={this.state.fullname} \n          birthday={this.state.birthday} \n          address={this.state.address} \n          email={this.state.email} \n          yourphone={this.state.yourphone} \n        />\n      </div>\n    );\n  }\n}\n\nclass ShowGeneralInformation extends Component{\n  render(){\n    return(\n      <div>\n        <h3>General Information</h3>\n        <span>Full Name: </span>\n        <span>{this.props.fullname}</span>\n        <br/><br/>\n        <span>BirthDay: </span>\n        <span>{this.props.birthday}</span>\n        <br/><br/>\n        <span>Address: </span>\n        <span>{this.props.address}</span>\n        <br/><br/>\n        <span>Email: </span>\n        <span>{this.props.email}</span>\n        <br/><br/>\n        <span>Phone Number: </span>\n        <span>{this.props.yourphone}</span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}